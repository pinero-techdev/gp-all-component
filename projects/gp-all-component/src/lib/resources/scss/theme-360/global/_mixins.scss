/* Absolute centered element */
@mixin absolute-centered($direction: 'horizontal') {
  position: absolute;

  @if ($direction == 'horizontal') {
    left: 50%;
    transform: translateX(-50%);
  } @else if ($direction == 'vertical') {
    top: 50%;
    transform: translateY(-50%);
  } @else if ($direction == 'all') {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
}

@mixin transition($transition...) {
  -moz-transition: $transition;
  -o-transition: $transition;
  -webkit-transition: $transition;
  transition: $transition;
}

@mixin make-button {
  display: flex;
  align-items: baseline;
  justify-content: center;
  overflow: hidden;
  color: $primaryBg;
  font-size: $buttonFontSize;
  font-weight: $buttonFontWeight;
  height: $buttonHeight;
  line-height: $buttonLineHeight;
  padding: $buttonPaddingVertical $buttonPaddingHorizontal;
  border-width: $buttonBorderWidth;
  border-style: $buttonBorderStyle;
  border-color: $buttonBg;
  border-radius: $buttonBorderRadius;
  margin: 0;
  box-shadow: 0 1px 4px 0 rgba($blackColor, $buttonShadowOpacity);
  @include make-button-theme($buttonBg, $buttonBorderColor);
}

@mixin make-button-theme($color, $borderColor, $transition: 0.3s) {
  @include transition(background-color $transition);
  background-color: $color;
  border-color: $borderColor;

  &:enabled:not(:focus):hover {
    background-color: darken($color, 3%);
    border-color: darken($borderColor, 3%);
  }

  &:focus {
    outline: 0 none;
    background-color: darken($color, 5%);
    border-color: darken($borderColor, 5%);
  }
}

@mixin make-flex-item-span($num) {
  $value: percentage($num / 12);
  flex: 0 0 $value;
  max-width: $value;
}

@mixin make-input() {
  @include make-input-text;

  background: $inputBg;
  border-width: $inputBorderWidth;
  padding: $inputPaddingVertical $inputPaddingHorizontal;
  border-color: $inputBorderColor;
  border-style: $inputBorderStyle;
  min-height: $inputHeight;
  width: 100%;
  transition: border-color 0.3s;
  border-radius: $inputBorderRadius;
  box-shadow: 0 0 4px 0 rgba($blackColor, $inputShadowOpacity);

  &:focus,
  &.ui-state-focus {
    @include make-input-state('focus');
  }

  &:disabled {
    @include make-input-state('disabled');
  }

  &.ui-state-error {
    @include make-input-state('error');
  }
}

@mixin make-input-text {
  font-size: $inputFontSize;
  line-height: $inputLineHeight;
  color: $inputColor;

  &::placeholder {
    color: $inputPlaceholderColor;
  }
}

@mixin make-input-state($type) {
  @if $type == 'focus' {
    border-color: $inputBorderFocusColor;
    background: $inputFocusBg;
  }

  @if $type == 'disabled' {
    border-color: $inputBorderDisabledColor;
    background: $inputDisabledBg;
    background-color: rgba(240, 242, 245, 0.5);
    box-shadow: 0 0 4px 0 rgba($blackColor, $inputShadowOpacity);
  }

  @if $type == 'error' {
    border-color: $inputBorderErrorColor;
    background: $inputErrorBg;
  }
}

/* Make custom scroll */
@mixin make-scroll($color: #000, $size: 8px, $border-radius: 8px) {
  background-color: rgba($color, 0);
  -webkit-background-clip: text;
  transition: background-color 0.4s;

  &:hover {
    background-color: rgba($color, 0.2);
  }

  &::-webkit-scrollbar {
    width: $size;
    height: $size;
  }

  &::-webkit-scrollbar-track {
    display: none;
  }

  &::-webkit-scrollbar-thumb {
    border-radius: $border-radius;
    background-color: inherit;
  }
}

@mixin make-label($has-correction: true, $is-white: false) {
  color: $textMutedColor;
  line-height: inherit;
  position: static;
  font-size: $fontSizeSmall;
  display: block;
  letter-spacing: 0.15px;

  @if ($has-correction) {
    white-space: nowrap;
    position: relative;
    line-height: 0;
    top: -15px;
  }

  @if ($is-white) {
    color: $inputLabelPrimaryColor;
  }
}

@mixin content-shadow() {
  box-shadow: 0 1px 3px 0 rgba($blackColor, $inputShadowOpacity),
    0 1px 1px 0 rgba($blackColor, $inputShadowOpacity),
    0 2px 1px -1px rgba($blackColor, $inputShadowOpacity);
}

@mixin overlay-input-shadow() {
  box-shadow: 0 1px 3px rgba($blackColor, $inputShadowOpacity * 3),
    0 1px 2px rgba($blackColor, $inputShadowOpacity * 6);
}
